module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    output customout[3],
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  
  sig rst;                 

  .clk(clk) {
    // synchronizes reset for all components
    reset_conditioner reset_cond;
    // triggers button press event only once
    button_conditioner buttoncond[4];
    edge_detector buttondetector[4](#RISE(1), #FALL(0));
    .rst(rst) {
      alu alu_obj;
    }
  }

  always {
    // DEFAULT ASSIGNMENTS FROM CREATING A PROJECT
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    customout = b000;
    
    
    // RECEIVING INPUT: BUTTONS
    
    // BUTTON 0: USED WITHIN MANUAL_TESTER.LUC TO SWITCH BETWEEN MANUAL INPUT STATES
    buttoncond.in[0] = io_button[0];
    buttondetector.in[0] = buttoncond.out[0];
    
    // BUTTON 1: USED TO ENTER AUTO TESTING MODE (switch_tester.AUTO)
    buttoncond.in[1] = io_button[1];
    buttondetector.in[1] = buttoncond.out[1];
    
    // BUTTON 2: USED TO ENTER ERROR CHECKING MODE (switch_tester.ERROR)
    buttoncond.in[2] = io_button[2];
    buttondetector.in[2] = buttoncond.out[2];
    
    // BUTTON 3: USED TO ENTER MANUAL TESTING MODE (switch_tester.MANUAL)
    buttoncond.in[3] = io_button[3];
    buttondetector.in[3] = buttoncond.out[3];
    
    // ASSIGNING INPUT TO ALU
    alu_obj.btn_input = buttondetector.out;
    alu_obj.dip_input = io_dip;
    
    // ASSIGNING ALU OUTPUT TO FPGA OUTUPT
    io_seg = alu_obj.seg_out;
    io_sel = alu_obj.sel_out;
    io_led = alu_obj.led;
    
  }
}
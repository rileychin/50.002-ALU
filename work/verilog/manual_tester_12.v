/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module manual_tester_12 (
    input btn_input,
    input [15:0] dip_input,
    input clk,
    input rst,
    output reg [15:0] a,
    output reg [15:0] b,
    output reg [5:0] alufn,
    output reg [1:0] state
  );
  
  
  
  reg [5:0] M_stored_alufn_d, M_stored_alufn_q = 1'h0;
  reg [15:0] M_stored_a_d, M_stored_a_q = 1'h0;
  reg [15:0] M_stored_b_d, M_stored_b_q = 1'h0;
  localparam ENTER_A_brain = 2'd0;
  localparam ENTER_B_brain = 2'd1;
  localparam ENTER_ALUFN_brain = 2'd2;
  
  reg [1:0] M_brain_d, M_brain_q = ENTER_A_brain;
  
  always @* begin
    M_brain_d = M_brain_q;
    M_stored_a_d = M_stored_a_q;
    M_stored_alufn_d = M_stored_alufn_q;
    M_stored_b_d = M_stored_b_q;
    
    state = 1'h0;
    
    case (M_brain_q)
      ENTER_A_brain: begin
        state = 2'h1;
        if (btn_input) begin
          M_stored_a_d = dip_input;
          M_brain_d = ENTER_B_brain;
        end else begin
          M_brain_d = ENTER_A_brain;
        end
      end
      ENTER_B_brain: begin
        state = 2'h2;
        if (btn_input) begin
          M_stored_b_d = dip_input;
          M_brain_d = ENTER_ALUFN_brain;
        end else begin
          M_brain_d = ENTER_B_brain;
        end
      end
      ENTER_ALUFN_brain: begin
        state = 2'h3;
        if (btn_input) begin
          M_stored_alufn_d = dip_input[0+5-:6];
          M_brain_d = ENTER_A_brain;
        end else begin
          M_brain_d = ENTER_ALUFN_brain;
        end
      end
    endcase
    a = M_stored_a_q;
    b = M_stored_b_q;
    alufn = M_stored_alufn_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_stored_alufn_q <= 1'h0;
      M_stored_a_q <= 1'h0;
      M_stored_b_q <= 1'h0;
      M_brain_q <= 1'h0;
    end else begin
      M_stored_alufn_q <= M_stored_alufn_d;
      M_stored_a_q <= M_stored_a_d;
      M_stored_b_q <= M_stored_b_d;
      M_brain_q <= M_brain_d;
    end
  end
  
endmodule

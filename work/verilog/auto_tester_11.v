/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module auto_tester_11 (
    input clk,
    input rst,
    input start,
    output reg [15:0] a,
    output reg [15:0] b,
    output reg [5:0] alufn,
    output reg [15:0] expected_out,
    output reg invalid_alufn,
    output reg [2:0] case_number
  );
  
  
  
  localparam AUTO_A = 96'h0000ffffa5c30019ffff8000;
  
  localparam AUTO_B = 96'h00000001f0a50017ffff7fff;
  
  localparam EXPECTED_OUT = 1824'h0000000000000000000000000000ffff0000ffffffffffffffff0000000000000001000000010000fffefffffffffffeffff000100000001fffefffe00000001fffe7fffffff0000000100019668b51ea6afa5c35566f5e7a0815a3cf0a50f5a5f7e0a18aa99b860052efd2e00000001000100300002023f0019000e001f0011ffe60017ffe8ffeeffe0fff10c8000000000000000000000fffe00000001ffff0000ffffffff0000ffff000000000000ffff80000001ffff000100000001ffff000180008000ffffffff00007fff7fff8000ffff0000000000000001ffff000000010001;
  
  wire [1-1:0] M_slowclock_value;
  counter_19 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  wire [1-1:0] M_slowClockEdge_out;
  reg [1-1:0] M_slowClockEdge_in;
  edge_detector_20 slowClockEdge (
    .clk(clk),
    .in(M_slowClockEdge_in),
    .out(M_slowClockEdge_out)
  );
  
  reg [5:0] M_stored_alufn_auto_d, M_stored_alufn_auto_q = 1'h0;
  reg [15:0] M_stored_a_d, M_stored_a_q = 16'h0000;
  reg [15:0] M_stored_b_d, M_stored_b_q = 16'h0000;
  reg [2:0] M_stored_i_d, M_stored_i_q = 3'h5;
  reg [4:0] M_stored_j_d, M_stored_j_q = 5'h12;
  localparam CASE_1_current_ab = 3'd0;
  localparam CASE_2_current_ab = 3'd1;
  localparam CASE_3_current_ab = 3'd2;
  localparam CASE_4_current_ab = 3'd3;
  localparam CASE_5_current_ab = 3'd4;
  localparam CASE_6_current_ab = 3'd5;
  
  reg [2:0] M_current_ab_d, M_current_ab_q = CASE_1_current_ab;
  localparam A_ADD_alufn_op = 5'd0;
  localparam A_SUB_alufn_op = 5'd1;
  localparam A_MUL_alufn_op = 5'd2;
  localparam B_A_alufn_op = 5'd3;
  localparam B_XOR_alufn_op = 5'd4;
  localparam B_OR_alufn_op = 5'd5;
  localparam B_AND_alufn_op = 5'd6;
  localparam B_NOTA_alufn_op = 5'd7;
  localparam B_B_alufn_op = 5'd8;
  localparam B_NOTB_alufn_op = 5'd9;
  localparam B_NAND_alufn_op = 5'd10;
  localparam B_NOR_alufn_op = 5'd11;
  localparam B_XNOR_alufn_op = 5'd12;
  localparam S_SHL_alufn_op = 5'd13;
  localparam S_SHR_alufn_op = 5'd14;
  localparam S_SRA_alufn_op = 5'd15;
  localparam C_CMPEQ_alufn_op = 5'd16;
  localparam C_CMPLT_alufn_op = 5'd17;
  localparam C_CMPLE_alufn_op = 5'd18;
  localparam E_ERROR_alufn_op = 5'd19;
  
  reg [4:0] M_alufn_op_d, M_alufn_op_q = A_ADD_alufn_op;
  
  always @* begin
    M_current_ab_d = M_current_ab_q;
    M_alufn_op_d = M_alufn_op_q;
    M_stored_alufn_auto_d = M_stored_alufn_auto_q;
    M_stored_i_d = M_stored_i_q;
    M_stored_j_d = M_stored_j_q;
    M_stored_a_d = M_stored_a_q;
    M_stored_b_d = M_stored_b_q;
    
    M_slowClockEdge_in = M_slowclock_value;
    M_stored_a_d = M_stored_a_q;
    M_stored_b_d = M_stored_b_q;
    invalid_alufn = 1'h0;
    if (start == 1'h1) begin
      M_alufn_op_d = A_ADD_alufn_op;
      M_current_ab_d = CASE_1_current_ab;
    end else begin
      if (M_slowClockEdge_out == 1'h1) begin
        
        case (M_alufn_op_q)
          A_ADD_alufn_op: begin
            M_stored_alufn_auto_d = 6'h00;
            M_alufn_op_d = A_SUB_alufn_op;
            M_stored_j_d = 5'h12;
            
            case (M_current_ab_q)
              CASE_1_current_ab: begin
                M_stored_a_d = 16'h0000;
                M_stored_b_d = 16'h0000;
                M_stored_i_d = 3'h5;
              end
              CASE_2_current_ab: begin
                M_stored_a_d = 16'hffff;
                M_stored_b_d = 16'h0001;
                M_stored_i_d = 3'h4;
              end
              CASE_3_current_ab: begin
                M_stored_a_d = 16'ha5c3;
                M_stored_b_d = 16'hf0a5;
                M_stored_i_d = 2'h3;
              end
              CASE_4_current_ab: begin
                M_stored_a_d = 16'h0019;
                M_stored_b_d = 16'h0017;
                M_stored_i_d = 2'h2;
              end
              CASE_5_current_ab: begin
                M_stored_a_d = 16'hffff;
                M_stored_b_d = 16'hffff;
                M_stored_i_d = 1'h1;
              end
              CASE_6_current_ab: begin
                M_stored_a_d = 16'h8000;
                M_stored_b_d = 16'h7fff;
                M_stored_i_d = 1'h0;
              end
            endcase
          end
          A_SUB_alufn_op: begin
            M_stored_alufn_auto_d = 6'h01;
            M_alufn_op_d = A_MUL_alufn_op;
            M_stored_j_d = 5'h11;
          end
          A_MUL_alufn_op: begin
            M_stored_alufn_auto_d = 6'h02;
            M_alufn_op_d = B_A_alufn_op;
            M_stored_j_d = 5'h10;
          end
          B_A_alufn_op: begin
            M_stored_alufn_auto_d = 6'h1a;
            M_alufn_op_d = B_XOR_alufn_op;
            M_stored_j_d = 4'hf;
          end
          B_XOR_alufn_op: begin
            M_stored_alufn_auto_d = 6'h16;
            M_alufn_op_d = B_OR_alufn_op;
            M_stored_j_d = 4'he;
          end
          B_OR_alufn_op: begin
            M_stored_alufn_auto_d = 6'h1e;
            M_alufn_op_d = B_AND_alufn_op;
            M_stored_j_d = 4'hd;
          end
          B_AND_alufn_op: begin
            M_stored_alufn_auto_d = 6'h18;
            M_alufn_op_d = B_NOTA_alufn_op;
            M_stored_j_d = 4'hc;
          end
          B_NOTA_alufn_op: begin
            M_stored_alufn_auto_d = 6'h15;
            M_alufn_op_d = B_B_alufn_op;
            M_stored_j_d = 4'hb;
          end
          B_B_alufn_op: begin
            M_stored_alufn_auto_d = 6'h1c;
            M_alufn_op_d = B_NOTB_alufn_op;
            M_stored_j_d = 4'ha;
          end
          B_NOTB_alufn_op: begin
            M_stored_alufn_auto_d = 6'h13;
            M_alufn_op_d = B_NAND_alufn_op;
            M_stored_j_d = 4'h9;
          end
          B_NAND_alufn_op: begin
            M_stored_alufn_auto_d = 6'h17;
            M_alufn_op_d = B_NOR_alufn_op;
            M_stored_j_d = 4'h8;
          end
          B_NOR_alufn_op: begin
            M_stored_alufn_auto_d = 6'h11;
            M_alufn_op_d = B_XNOR_alufn_op;
            M_stored_j_d = 3'h7;
          end
          B_XNOR_alufn_op: begin
            M_stored_alufn_auto_d = 6'h19;
            M_alufn_op_d = S_SHL_alufn_op;
            M_stored_j_d = 3'h6;
          end
          S_SHL_alufn_op: begin
            M_stored_alufn_auto_d = 6'h20;
            M_alufn_op_d = S_SHR_alufn_op;
            M_stored_j_d = 3'h5;
          end
          S_SHR_alufn_op: begin
            M_stored_alufn_auto_d = 6'h21;
            M_alufn_op_d = S_SRA_alufn_op;
            M_stored_j_d = 3'h4;
          end
          S_SRA_alufn_op: begin
            M_stored_alufn_auto_d = 6'h23;
            M_alufn_op_d = C_CMPEQ_alufn_op;
            M_stored_j_d = 2'h3;
          end
          C_CMPEQ_alufn_op: begin
            M_stored_alufn_auto_d = 6'h33;
            M_alufn_op_d = C_CMPLT_alufn_op;
            M_stored_j_d = 2'h2;
          end
          C_CMPLT_alufn_op: begin
            M_stored_alufn_auto_d = 6'h35;
            M_alufn_op_d = C_CMPLE_alufn_op;
            M_stored_j_d = 1'h1;
          end
          C_CMPLE_alufn_op: begin
            M_stored_alufn_auto_d = 6'h37;
            M_alufn_op_d = E_ERROR_alufn_op;
            M_stored_j_d = 1'h0;
          end
          E_ERROR_alufn_op: begin
            M_stored_alufn_auto_d = 6'h3f;
            M_alufn_op_d = A_ADD_alufn_op;
            invalid_alufn = 1'h1;
            
            case (M_current_ab_q)
              CASE_1_current_ab: begin
                M_current_ab_d = CASE_2_current_ab;
              end
              CASE_2_current_ab: begin
                M_current_ab_d = CASE_3_current_ab;
              end
              CASE_3_current_ab: begin
                M_current_ab_d = CASE_4_current_ab;
              end
              CASE_4_current_ab: begin
                M_current_ab_d = CASE_5_current_ab;
              end
              CASE_5_current_ab: begin
                M_current_ab_d = CASE_6_current_ab;
              end
              CASE_6_current_ab: begin
                M_current_ab_d = CASE_1_current_ab;
              end
            endcase
          end
        endcase
      end
    end
    a = M_stored_a_q;
    b = M_stored_b_q;
    alufn = M_stored_alufn_auto_q;
    expected_out = EXPECTED_OUT[(M_stored_i_q)*304+(M_stored_j_q)*16+15-:16];
    case_number = 3'h6 - M_stored_i_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_stored_alufn_auto_q <= 1'h0;
      M_stored_a_q <= 16'h0000;
      M_stored_b_q <= 16'h0000;
      M_stored_i_q <= 3'h5;
      M_stored_j_q <= 5'h12;
      M_current_ab_q <= 1'h0;
      M_alufn_op_q <= 1'h0;
    end else begin
      M_stored_alufn_auto_q <= M_stored_alufn_auto_d;
      M_stored_a_q <= M_stored_a_d;
      M_stored_b_q <= M_stored_b_d;
      M_stored_i_q <= M_stored_i_d;
      M_stored_j_q <= M_stored_j_d;
      M_current_ab_q <= M_current_ab_d;
      M_alufn_op_q <= M_alufn_op_d;
    end
  end
  
endmodule
